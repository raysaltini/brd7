<?php

module_load_include('inc', 'salesforce', 'includes/salesforce');

/**
 * Implements hook_help().
 */
function salesforce_help($path, $arg) {
  switch ($path) {
    case 'admin/help#salesforce':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module suite implements a mapping functionality between Salesforce
  objects and Drupal entities. In other words, for each of your supported Drupal
  entities (e.g. node, user, or entities supported by extensions), you can
  assign Salesforce objects that will be created / updated when the entity is
  saved. For each such assignment, you choose which Drupal and Salesforce fields
  should be mapped to one another.') . '</p>';
      $output .= '<p>' . t('This suite also includes an API architecture which allows for additional
  modules to be easily plugged in (e.g. for webforms, contact form submits,
  etc).') . '</p>';

      $output .= '<p>' . t('For a more detailed description of each component module, see below.') . '</p>';
      $output .= '<h3>' . t('Requirements') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t('You need a Salesforce account. Developers can !register_here.', array('!register_here' => l(t('register here'), 'http://www.developerforce.com/events/regular/registration.php'))) . '</li>';
      $output .= '<li>' . t('You will need to create a remote application/connected app for authorization.') . '</li>';
      $output .= '<ul>';
      $output .= '<li>' . t('In Salesforce go to Your Name > Setup > Create > Apps then create a new Connected App.') . '</li>';
      $output .= '<li>' . t('Set the callback URL to: !url (must use SSL)', array('!url' => '<code>' . $_SERVER['HTTP_REFERER'] . 'salesforce/oauth_callback' . '</code>')) . '</li>';
      $output .= '<li>' . t('Select at least "Perform requests on your behalf at any time" for OAuth Scope
  as well as the appropriate other scopes for your application. !info.', array('!info' => l(t('Additional information'), 'https://help.salesforce.com/help/doc/en/remoteaccess_about.htm'))) . '</li>';
      $output .= '<li>' . t('For more help see !salesforce.', array('!salesforce' => l(t('the salesforce.com documentation'), 'https://www.salesforce.com/us/developer/docs/api_rest/Content/quickstart_oauth.htm'))) . '</li>';
      $output .= '</ul>';
      $output .= '<li>' . t('Your site needs to be SSL enabled to authorize the remote application using OAUTH.') . '</li>';
      $output .= '<li>' . t('If using the SOAP API, PHP must be compiled with !SOAP and !SSL.',
        array(
          '!SOAP' => l(t('SOAP web services'), 'http://php.net/soap'),
          '!SSL' => l(t('OpenSSL support'), 'http://php.net/openssl'))
        ) . '</li>';
      $output .= '</ol>';
      $output .= '<h4>' . t('Required modules') . '</h4>';
      $output .= '<ul>';
      $output .= '<li>' . l(t('Entity API'), 'http://drupal.org/project/entity') . '</li>';
      $output .= '<li>' . l(t('Libraries, only for SOAP API'), 'http://drupal.org/project/libraries') . '</li>';
      $output .= '</ul>';
      $output .= '<h3>' . t('Modules') . '</h3>';
      $output .= '<h4>' . t('Salesforce (salesforce)') . '</h4>';
      $output .= '<p>' . t('OAUTH2 authorization and wrapper around the Salesforce REST API.') . '</p>';
      $output .= '<h4>' . t('Salesforce Mapping (salesforce_mapping)') . '</h4>';
      $output .= '<p>' . t('Map Drupal entities to Salesforce fields, including field level mapping.') . '</p>';
      $output .= '<h4>' . t('Salesforce Push (salesforce_push)') . '</h4>';
      $output .= '<p>' . t('Push Drupal entity updates into Salesforce.') . '</p>';
      $output .= '<h4>' . t('Salesforce Pull (salesforce_pull)') . '</h4>';
      $output .= '<p>' . t('Pull Salesforce object updates into Drupal.') . '</p>';
      $output .= '<h4>' . t('Salesforce Soap (salesforce_soap)') . '</h4>';
      $output .= '<p>' . t('Lightweight wrapper around the SOAP API, using the OAUTH access token, to fill in functional gaps missing in the REST API. Requires the Salesforce PHP Toolkit.') . '</p>';
      $output .= '<p>' . t('Example installation of the Salesforce PHP Toolkit using the provided Drush Make file:') . ' <code>drush make /path/to/salesforce/modules/salesforce_soap/salesforce_soap.make.example --no-core -y</code>' . '</p>';
      return $output;

    case 'admin/config/services/salesforce':
      return '<p>' . t('Visit !help if you need help obtaining a consumer key and secret.', array('!help' => l(t('the Salesforce module help page'), 'admin/help/salesforce'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function salesforce_menu() {
  $items = array();

  $items['admin/config/services/salesforce'] = array(
    'title' => 'Salesforce',
    'description' => 'Authorize this website to communicate with Salesforce.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_oauth_form'),
    'access arguments' => array('administer salesforce'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/salesforce/authorize'] = array(
    'title' => 'Authorize',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['salesforce/oauth_callback'] = array(
    'title' => 'Salesforce oauth callback',
    'page callback' => 'salesforce_oauth_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/salesforce'] = array(
    'title' => 'Salesforce',
    'description' => 'Configuration for Salesforce integration.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer salesforce'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function salesforce_permission() {
  return array(
    'administer salesforce' => array(
      'title' => t('administer salesforce'),
      'description' => t('Administer Salesforce integration.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Generate the Salesforce authorization form.
 *
 * @return array
 */
function salesforce_oauth_form() {
  $form = array();

  $consumer_key = variable_get('salesforce_consumer_key', FALSE);
  $consumer_secret = variable_get('salesforce_consumer_secret', FALSE);

  $form['message'] = array(
    '#type' => 'item',
    '#markup' => t('Authorize this website to communicate with Salesforce by entering the consumer key and secret from a remote application. Clicking authorize will redirect you to Salesforce where you will be asked to grant access.'),
  );

  $form['salesforce_consumer_key'] = array(
    '#title' => t('Salesforce consumer key'),
    '#type' => 'textfield',
    '#description' => t('Consumer key of the Salesforce remote application you want to grant access to'),
    '#required' => TRUE,
    '#default_value' => $consumer_key
  );
  $form['salesforce_consumer_secret'] = array(
    '#title' => t('Salesforce consumer secret'),
    '#type' => 'textfield',
    '#description' => t('Consumer secret of the Salesforce remote application you want to grant access to'),
    '#required' => TRUE,
    '#default_value' => $consumer_secret
  );
  $form['submit'] = array(
    '#value' => t('Authorize'),
    '#type' => 'submit',
  );

  // if we're authenticated, show a list of available REST resources
  if ($consumer_key && $consumer_secret) {
    $sfapi = new Salesforce($consumer_key, $consumer_secret);
    // if fully configured, attempt to connect to SF and return a list of resources
    if ($sfapi->isAuthorized()) {
      try {
        $resources = $sfapi->listResources();
        foreach ($resources as $key => $path) {
          $items[] = $key . ': ' . $path;
        }
        $form['resources'] = array(
          '#title' => t('Your Salesforce instance is authorized and has access to the following resources:'),
          '#type' => 'item',
          '#markup' => theme('item_list', array('items' => $items)),
        );
      }
      catch(SalesforceException $e) {
        drupal_set_message($e->getMessage(), 'warning');
      }
    }
    else {
      drupal_set_message(t('Salesforce needs to authorized to connect to this website.'));
    }
  }

  return $form;
}

/**
 * Submit handler for salesforce_oauth_form().
 *
 * @param $form
 * @param $form_state
 */
function salesforce_oauth_form_submit($form, &$form_state) {
  $consumer_key = $form_state['values']['salesforce_consumer_key'];
  $consumer_secret = $form_state['values']['salesforce_consumer_secret'];
  variable_set('salesforce_consumer_key', $consumer_key);
  variable_set('salesforce_consumer_secret', $consumer_secret);

  $salesforce = new Salesforce($consumer_key, $consumer_secret);
  $salesforce->getAuthorizationCode();
}

/**
 * Callback for the oauth redirect URI. Exchanges an authorization code for an
 * access token.
 */
function salesforce_oauth_callback() {
  $salesforce = salesforce_get_api();
  $salesforce->requestToken($_GET['code']);

  drupal_set_message('Salesforce OAUTH2 authorization successful.');

  // Rebuild the menu so the mappings links are now available.
  menu_rebuild();

  drupal_goto('admin/config/services/salesforce');
}

/**
 * Wrapper around the API constructor passing consume key and secret.
 *
 * @return Salesforce
 */
function salesforce_get_api() {
  return new Salesforce(
    variable_get('salesforce_consumer_key', ''),
    variable_get('salesforce_consumer_secret', '')
  );
}
